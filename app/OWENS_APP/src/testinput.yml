

toplevel:
      analysisType: unsteady # unsteady, steady, modal
      meshFunction: create_mesh_struts # create_mesh_struts, create_mesh_HVAWT
      aeroFunction: VAWTAero #VAWTAero, AeroDyn
      structuralFunction: GX #GX, TNB, ROM


inputfiles:
    NuMad_geom_xlscsv_file: "$path/data/SNL34mGeom.csv"
    NuMad_mat_xlscsv_file: "$path/data/SNL34mMaterials.csv"
    NuMad_geom_xlscsv_file: "$path/data/NuMAD_34m_TowerGeom.csv"
    NuMad_mat_xlscsv_file: "$path/data/NuMAD_34m_TowerMaterials.csv"


mesh:
  Ht: nothing #* `Ht::float`: height of tower before blades attach (m)
  Hb: nothing #* `Hb::float`: blade height (m)
  R: nothing #* `R::float`: bade radius (m)
  nblade: nothing #* `nblade::int`: number of blades
  ntelem: nothing #* `ntelem::int`: number of tower elements
  nbelem: nothing #* `nbelem::int`: number of blade elements
  nselem: nothing #* `nselem::int`: number of strut elements
  strut_mountpointbot: nothing #* `strut_mountpointbot::float`: factor of blade height where the struts attach on the bottom
  strut_mountpointtop: nothing #* `strut_mountpointtop::float`: factor of blade height where the struts attach on the top
  bshapex: nothing #* `bshapex::Array{<:float}`: Blade shape, magnitude is irrelevant, scaled based on height and radius above
  bshapez: nothing #* `bshapez::Array{<:float}`: Blade shape, magnitude is irrelevant, scaled based on height and radius above
  bshapey: nothing #* `bshapey::Array{<:float}`: Blade shape, magnitude IS relevant
  angularOffset: nothing #* `angularOffset::float`: (rad) angular offset of mesh generation, typically used to match CACTUS input.  Value of 0 puts blade 1 at the "north" position and the others populate counterclockwise when looking down

VAWTAero:
  bld_x: nothing #bld_x: Blade x shape
  bld_z: nothing #bld_z: Blade z shape
  B: nothing #B: Number of blades
  chord: nothing #chord: chord length (m)
  TSR: nothing #TSR: Tip speed ratio
  Vinf: nothing #Vinf: Inflow velocity
  Height: nothing #Height: turbine total height (m) typically maximum(bldz) unless only the shape and not size of bldz is being used
  Radius: nothing #Radius: turbine nominal radius (m) typically maximum(bldx) unless only shape and not size of bldx is used
  eta: nothing #eta: blade mount point ratio, i.e. 0.25 would be at the quarter chord
  twist: nothing #twist: 0.0, #or array{Float,Nslices}
  rho: nothing #rho: working fluid density (kg/m^3)
  mu: nothing #mu: working fluid density (standard SI units)
  RPI: nothing #RPI: RPI method flag
  tau: nothing #tau: Unsteady wake propogation time constants [0.3,3.0],
  ntheta: nothing #ntheta: Number of azimuthal discretizations
  Nslices: nothing #Nslices: Number of vertical slices of the turbine
  ifw: nothing #ifw: flag for inflow wind
  DSModel: nothing #DSModel: Dynamic stall model "BV" or "none" or "LB" when we get it working
  AModel: nothing #AModel: Aerodynamic model "DMS" or "AC"
  windangle_D: nothing #windangle_D: Inflow wind angle (degrees)
  afname: nothing #afname: airfoil path and name e.g. "(path)/airfoils/NACA0015RE3E5.dat"
  turbsim_filename: nothing #turbsim_filename: turbsim path and name e.g. "(path)/data/ifw/turbDLC1p313mps330mseed1.bts",
  ifw_libfile: nothing #ifw_libfile: inflow wind dynamic library location e.g. joinpath(dirname(@FILE),"../../../openfast/build/modules/inflowwind/libifwcbinding"))

AeroDyn:
  adi_lib: "$path_setupfile/../../openfastandy/build/modules/aerodyn/libaerodyn_inflow_c_binding.dylib"
  # input files for ADI
  ad_input_file: path_setupfile/../Model_Inputs/ADInputFile_oneTurbine.dat"
  ifw_input_file: path_setupfile/../Model_Inputs/IW.dat"
  # output files from ADI
  adi_rootname: "$path/XFlow_OWENS_AD15"
  vtkname: "$path/vtk/OWENS_test_ADI_ROM"

OpenFASTWrappers_setupTurb:
  adi_lib: nothing #adi_lib: path to adi library (.so, .dylib, .dll)
  ad_input_file: nothing #ad_input_file: input file for aerodyn15
  ifw_input_file: nothing #ifw_input_file: input file for inflow wind
  adi_rootname: nothing #adi_rootname: rootname for vtk outputs
  bld_x: nothing #bld_x: Blade x shape
  bld_z: nothing #bld_z: Blade z shape
  B: nothing #B: Number of blades
  rho: nothing #rho: working fluid density (kg/m^3)
  gravity: nothing #gravity: Gravitational acceleration (m/s^2)
  defKinVisc: nothing #defKinVisc: Kinematic viscosity of working fluid (m^2/s)
  defSpdSound: nothing #defSpdSound: Speed of sound in working fluid (m/s)
  defPatm: nothing #defPatm: Atmospheric pressure (Pa) [used only for an MHK turbine cavitation check]
  defPvap: nothing #defPvap: Vapour pressure of working fluid (Pa) [used only for an MHK turbine cavitation check]
  WtrDpth: nothing #WtrDpth: Water depth (m)
  MSL2SWL: nothing #MSL2SWL: Offset between still-water level and mean sea level (m) [positive upward]
  storeHHVel: nothing #storeHHVel: unused here
  transposeDCM: nothing #transposeDCM: 0=false, 1=true transpose DCM internally for calculations
  WrVTK: nothing #WrVTK: write VTK files from adi to directory adi-vtk [0 none, 1 ref, 2 motion]
  WrVTK_Type: nothing #WrVTK_Type: write VTK files from adi to directory adi-vtk [1 surface, 2 lines, 3 both]
  VTKNacDim: nothing #VTKNacDim: Nacelle Dimension for VTK visualization x0,y0,z0,Lx,Ly,Lz (m)
  VTKHubRad: nothing #VTKHubRad: HubRadius for VTK visualization (m)
  adi_wrOuts: nothing #adi_wrOuts: file format to write to
  adi_DT_Outs: nothing #adi_DT_Outs: output timestep to write at
  adi_nstrut: nothing #adi_nstrut: createmeshstruts is hard coded for 2 struts per blade
  adi_dt: nothing #adi_dt: timestep
  adi_tmax: nothing #adi_tmax: maximum time
  hubPos: nothing #hubPos: hub position in global coordinates, 3-vector (m). NOTE: AD15 assumes a different hub location than OWENS
  hubAngle: nothing #hubAngle: hub axis angle, 3-vector (deg)
  nacPos: nothing #nacPos: nacelle position in global coordinates, 3-vector (m). NOTE: AD15 assumes a different hub location than OWENS
  nacAngle: nothing #nacAngle: nacelle axis angle, 3-vector (deg)
  numTurbines: nothing #numTurbines: number of turbines

# pBC = [ 1 1 0
#         1 2 0
#         1 3 0
#         1 4 0
#         1 5 0
#         1 6 0]

OWENS_Inputs: 
  analysisType: nothing #analysisType::string: Newmark Beta time stepping "TNB", Dean time stepping "TD", modal "M"
  turbineStartup: nothing #turbineStartup::int: 1 forced start-up using generator as motor, 2 self-starting mode, 0 specifiedrotor speed mode")
  usingRotorSpeedFunction: nothing #usingRotorSpeedFunction::bool: use user specified rotor speed profile function
  tocp: nothing #tocp::Array{<:float}: = time points for rotor speed profile (s)
  tocp_Vinf: nothing #tocp_Vinf::Array{<:float}: = time points for specified Vinf profile (s)
  numTS: nothing #numTS::int: total number of timesteps to run
  delta_t: nothing #delta_t::float: timestep interval (s)
  Omegaocp: nothing #Omegaocp::Array{<:float}: = rotor speed points for rotor speed profile (Hz)
  Vinfocp: nothing #Vinfocp::Array{<:float}: = rotor speed points for specified Vinf profile (Hz)
  aeroLoadsOn: nothing #aeroLoadsOn::bool: #0 off, 1 one way, 1.5 one way with deformation from last timestep, 2 two way
  AD15On: nothing #AD15On::bool: flag to use AD15 for aero
  driveTrainOn: nothing #driveTrainOn::bool: flag to include drivetrain effects
  generatorOn: nothing #generatorOn::bool: flag to include generator effects
  hydroOn: nothing #hydroOn::bool: flag to include platform coupling
  interpOrder: nothing #interpOrder::int: order used for extrapolating inputs and states, 0 flat, 1 linear, 2 quadratic
  hd_input_file: nothing #hd_input_file::string: file path to the HydroDyn .dat input file
  md_input_file: nothing #md_input_file::string: file path to the MoorDyn .dat input file
  JgearBox: nothing #JgearBox::float: gearbox intertia, standard SI units
  gearRatio: nothing #gearRatio::float: gearbox gear ratio
  gearBoxEfficiency: nothing #gearBoxEfficiency::float: gearbox efficiency (typically 0-1)
  useGeneratorFunction: nothing #useGeneratorFunction::bool: = flag to use user specified generator profile
  generatorProps: nothing #generatorProps::float: not used, should clean up
  ratedTorque: nothing #ratedTorque::float: Generator rated max torque
  zeroTorqueGenSpeed: nothing #zeroTorqueGenSpeed::float: rated generator speed (minus slippage)
  pulloutRatio: nothing #pulloutRatio::float: Fraction of the min/max torque that the generator engages/disengages
  ratedGenSlipPerc: nothing #ratedGenSlipPerc::float: extra speed from slipping?
  OmegaGenStart: nothing #OmegaGenStart::float: speed (Hz) at which generator would kick in
  omegaControl: nothing #omegaControl::bool: false for fixed speed, true for dynamic
  OmegaInit: nothing #OmegaInit::float: initial rotor speed (Hz)
  aeroloadfile: nothing #aeroloadfile::string: string of the name and path for the cactus aeroloads if using the old serialowens call
  owensfile: nothing #owensfile::string: string of the name and path for the owens input file if using the old serialowens call
  potflowfile: nothing #potflowfile::string: string of the prefix and path for the directory containing the potential flowfiles from WAMIT (required by HydroDyn)
  outFilename: nothing #outFilename::string: path and name of output file, will be overwritten if already exists
  numDofPerNode: nothing #numDofPerNode::int: number of degrees of freedom per node
  bladeData: nothing #bladeData::BladeData: see ?BladeData, only used if calling the old serial owens function
  driveShaftProps: nothing #driveShaftProps::DriveShaftProps: see ?DriveShaftProps
  TOl: nothing #TOl::float: gauss-seidel iteration tolerance
  MAXITER: nothing #MAXITER::int: gauss-seidel maximum iterations
  iterwarnings: nothing #iterwarnings::bool: iteration warnings flag

GyricFEA_FEAModel:
  analysisType: nothing #analysisType::string: Newmark Beta time stepping "TNB", Dean time stepping "TD", modal "M", and stiff "stiff" (where the forces are just directly mapped, the displacements and strains set to 0 and the structures not run)
  initCond: nothing #initCond::Array{<:float}: Initial conditions Nx3 matrix consisting of nodeNumber, local DOF (1-6), and displacement value
  aeroElasticOn: nothing #aeroElasticOn::Bool: Include simplified flutter calculataions in the timoshenko element matrices
  guessFreq: nothing #guessFreq::float: aeroelastic starting guess, only used if aeroElasticOn
  airDensity: nothing #airDensity::float: working fluid density
  gravityOn: nothing #gravityOn::Bool orArray{<:float}: vector of 3 or flag to include distributed gravity acceleration (9.81m/s) in the negative z-direction
  nlOn: nothing #nlOn::Bool: flag for solver to calculate deflection induced stiffness changes and associated convergance to the coupled solution
  spinUpOn: nothing #spinUpOn::Bool: flag to perform a static analysis (warm start) prior to performing modal analysis
  outFilename: nothing #outFilename::string: /path/to/desired/output/filename if it doesn't exist already it is created, if exists, is overwritten
  RayleighAlpha: nothing #RayleighAlpha::float: Rayleigh alpha damping used in timoshenko beam damping matrix
  RayleighBeta: nothing #RayleighBeta::float: Rayleigh beta damping used in timoshenko beam damping matrix
  elementOrder: nothing #elementOrder::int: order of element: 1 linear, 2 quadratic
  joint: nothing #joint::Array{<:float}: jointNumber masterNode slaveNode jointType (0 weld/fixed, 1 pinned, 2 hinge along local "2", 3 hinge about local "1", 4 hinge along "3", 5 rigid bar constraint) jointMass 0.0 jointPsi jointTheta
  platformTurbineConnectionNodeNumber: nothing #platformTurbineConnectionNodeNumber::int: node at which reaction forces are calculated
  jointTransform: nothing #jointTransform: not used as an input, is calculated, local transform between dependent and active DOFs for nodes associated with a particular joint
  reducedDOFList: nothing #reducedDOFList::Array{<:int}: not used as an input, is calculated, map of original DOF numbering to reduced DOF numbering
  numDOFPerNode: nothing #numDOFPerNode::int: number of degrees of freedom per node
  numNodes: nothing #numNodes::int: total number of nodes in the mesh
  numModes: nothing #numModes::int: number of modes to calculate
  nlParams: nothing #nlParams::NlParams: optional there in case the Nlparams struct is passed in, should be cleaned up since redundant
  alpha: nothing #alpha::float64: optional newmark beta alpha parameter,If TD, use 0.25
  gamma: nothing #gamma::float64: optional newmark beta gamma parameter, if static, use 0. If hydro, use 1.0
  pBC: nothing #pBC::Array{<:float}: Nx3 array consisting of node, local dof, specified displacement value for the boundary condition
  nodalTerms: nothing #nodalTerms: Concentrated nodal terms, should be replaced with the nodal input data array and the calc done internally
  iterationType: nothing #iterationType::string: FEA displacement update calculation, Newton Raphson "NR", Direct Iteration "DI"
  adaptiveLoadSteppingFlag: nothing #adaptiveLoadSteppingFlag: Unused, should be removed
  tolerance: nothing #tolerance::float: FEA total mesh unsteady analysis convergence tolerance for a timestep
  maxIterations: nothing #maxIterations: FEA total mesh unsteady analysis convergence max iterations for a timestep
  maxNumLoadSteps: nothing #maxNumLoadSteps: used in static (steady state) analysis
  minLoadStepDelta: nothing #minLoadStepDelta: used in static (steady state) analysis
  minLoadStep: nothing #minLoadStep: used in static (steady state) analysis
  prescribedLoadStep: nothing #prescribedLoadStep: used in static (steady state) analysis
  predef: nothing #predef::Bool: will update the elStorage array if passed into Unsteady() with the nonlinear strain stiffening, to be used for subsequent analyses