function [elStorage] = initialElementCalculations(model,el,mesh)
#initialElementCalculations  performs intitial element calculations
# **********************************************************************
# *                   Part of the SNL OWENS Toolkit                    *
# * Developed by Sandia National Laboratories Wind Energy Technologies *
# *             See license.txt for disclaimer information             *
# **********************************************************************
#   [elStorage] = initialElementCalculations(model,el,mesh)
#
#   This function performs initial element calculation for use later in
#   analysis for efficiency gains.
#
#      input:
#      model               = object containing model information
#      el                  = object containing element information
#      mesh                = object containing mesh information
#
#      output:
#      elStorage           = object containing stored element data


#initial element calculation
numNodesPerEl = 2;

single_elStorage = struct('K11', zeros(2,2),...
      'K12', zeros(2,2),...
      'K13', zeros(2,2),...
      'K14', zeros(2,2),...
      'K15', zeros(2,2),...
      'K16', zeros(2,2),...
      'K22', zeros(2,2),...
      'K23', zeros(2,2),...
      'K24', zeros(2,2),...
      'K25', zeros(2,2),...
      'K26', zeros(2,2),...
      'K33', zeros(2,2),...
      'K34', zeros(2,2),...
      'K35', zeros(2,2),...
      'K36', zeros(2,2),...
      'K44', zeros(2,2),...
      'K45', zeros(2,2),...
      'K46', zeros(2,2),...
      'K55', zeros(2,2),...
      'K56', zeros(2,2),...
      'K66', zeros(2,2),...
      'M11', zeros(2,2),...
      'M15', zeros(2,2),...
      'M16', zeros(2,2),...
      'M22', zeros(2,2),...
      'M24', zeros(2,2),...
      'M33', zeros(2,2),...
      'M34', zeros(2,2),...
      'M44', zeros(2,2),...
      'M55', zeros(2,2),...
      'M56', zeros(2,2),...
      'M66', zeros(2,2),...
      'S11', zeros(2,2),...
      'S12', zeros(2,2),...
      'S13', zeros(2,2),...
      'S15', zeros(2,2),...
      'S16', zeros(2,2),...
      'S22', zeros(2,2),...
      'S23', zeros(2,2),...
      'S25', zeros(2,2),...
      'S26', zeros(2,2),...
      'S33', zeros(2,2),...
      'S35', zeros(2,2),...
      'S36', zeros(2,2),...
      'S55', zeros(2,2),...
      'S56', zeros(2,2),...
      'S66', zeros(2,2),...
    'S14_1', zeros(2,2),...
    'S14_2', zeros(2,2),...
    'S24_1', zeros(2,2),...
    'S24_2', zeros(2,2),...
    'S34_1', zeros(2,2),...
    'S34_2', zeros(2,2),...
    'S45_1', zeros(2,2),...
    'S45_2', zeros(2,2),...
    'S46_1', zeros(2,2),...
    'S46_2', zeros(2,2),...
    'S44_1', zeros(2,2),...
    'S44_2', zeros(2,2),...
    'S44_3', zeros(2,2),...
      'C12', zeros(2,2),...
      'C13', zeros(2,2),...
      'C23', zeros(2,2),...
      'C24', zeros(2,2),...
      'C25', zeros(2,2),...
      'C26', zeros(2,2),...
      'C34', zeros(2,2),...
      'C35', zeros(2,2),...
      'C36', zeros(2,2),...
    'C14_1', zeros(2,2),...
    'C14_2', zeros(2,2),...
    'C45_1', zeros(2,2),...
    'C45_2', zeros(2,2),...
    'C46_1', zeros(2,2),...
    'C46_2', zeros(2,2),...
      'mel', zeros(1,1),...
    'moiel', zeros(3,3),...
     'xmel', zeros(3,1));

elStorage = repmat(single_elStorage,1,mesh.numEl);

for i=1:mesh.numEl
    #Calculate Ke and Fe for element i
    elInput.elementOrder = model.elementOrder; #assign elInput for element i
    elInput.modalFlag = true;
    elInput.xloc = [0.0 el.elLen(i)];
    elInput.sectionProps = el.props(i);
    elInput.sweepAngle = el.psi(i);
    elInput.coneAngle = el.theta(i);
    elInput.rollAngle = el.roll(i);
    elInput.aeroSweepAngle = 0.0;

    elx = zeros(1,numNodesPerEl);
    ely = zeros(1,numNodesPerEl);
    elz = zeros(1,numNodesPerEl);
    for j=1:numNodesPerEl

        #get element cooridnates
        elx(j) = mesh.x(mesh.conn(i,j));
        ely(j) = mesh.y(mesh.conn(i,j));
        elz(j) = mesh.z(mesh.conn(i,j));

    end

    #get concentrated terms associated with elemetn
    [massConc,~,~,model.joint,nodalTerms.concMass,nodalTerms.concStiff] = ConcMassAssociatedWithElement(mesh.conn(i,:),model.joint,model.nodalTerms.concMass,model.nodalTerms.concStiff,model.nodalTerms.concLoad);

    elInput.x = elx;
    elInput.y = ely;
    elInput.z = elz;
    elInput.concMassFlag = ~isempty(find(massConc,1));
    elInput.concMass = massConc; #only needed for structure mass props (not used in saved element matrices)

    elInput.Omega = 0;

    elStorage(i) = calculateTimoshenkoElementInitialRun(elInput); #initial element calculations for storage
end

end
