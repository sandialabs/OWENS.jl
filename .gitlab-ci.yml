# An example .gitlab-ci.yml file to test (and optionally report the coverage
# results of) your [Julia][1] packages. Please refer to the [documentation][2]
# for more information about package development in Julia.
#
# Here, it is assumed that your Julia package is named `MyPackage`. Change it to
# whatever name you have given to your package.
#
# [1]: http://julialang.org/
# [2]: https://docs.julialang.org/en/v1/manual/documentation/index.html

# Below is the template to run your tests in Julia
.test_template: &test_definition
  # Uncomment below if you would like to run the tests on specific references
  # only, such as the branches `master`, `development`, etc.
  # only:
  #   - master
  #   - development
  before_script:
    - export JULIA_SSL_CA_ROOTS_PATH=""
    - export JULIA_SSL_NO_VERIFY_HOSTS="**"
    - export http_proxy="http://user:nopass@proxy.sandia.gov:80/"
    - export https_proxy="http://user:nopass@proxy.sandia.gov:80/"
    - export HTTP_PROXY="http://user:nopass@proxy.sandia.gov:80/"
    - export HTTPS_PROXY="http://user:nopass@proxy.sandia.gov:80/"
    - export no_proxy=*.local,169.254/16,*.sandia.gov,*.srn.sandia.gov,localhost,127.0.0.1,::1
    - export NO_PROXY=*.local,169.254/16,*.sandia.gov,*.srn.sandia.gov,localhost,127.0.0.1,::1
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    # Generate the private/public key pair using:
    #
    #     ssh-keygen -t rsa -m PEM -C username@sandia.gov
    #
    # then set the $GIT_SSH_PRIV_KEY environment variable in the CI (Travis-CI,
    # GitLab-CI, ...) to the base64 encoded private key (i.e. use the string that
    # comes out of this command for the VALUE in Project Settings -> CI/CD -> Variables
    # the KEY is the word GIT_SSH_PRIV_KEY):
    #
    #     cat generatedkey | base64
    #
    # and add the public key `deploy_key.pub` into the target git repository (with
    # write permissions). Project Settings -> Repository -> Deploy Keys (or your profile public key)
    # The code below decodes it into the correct format
    - ssh-add <(echo "$GIT_SSH_PRIV_KEY" | base64 --decode)
    - mkdir -p ~/.ssh && touch ~/.ssh/known_hosts
    - echo cee-gitlab.sandia.gov,205.137.80.113 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBPGMKnnt5MDq2swdsmJqIGjQF6JfqXM/Ju1e0lGZiaL6rdOY0dTZFBDHuSrwrp954J0WYXuMKRJB54uMi7B+VZc= >> ~/.ssh/known_hosts
    - export SSH_KEY_PATH=~/.ssh
    - export JULIA_PKG_USE_CLI_GIT=true
    - (echo "$GIT_SSH_PRIV_KEY" | base64 --decode) > ~/.ssh/id_rsa
    - chmod 400 ~/.ssh/id_rsa
    - 'which git || ( apt-get update -y && apt-get install git -y )'
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global http.sslVerify false
    - git config --global https.sslVerify false
    - git config --global http.proxy http://user:nopass@proxy.sandia.gov:80
    - git config --global https.proxy http://user:nopass@proxy.sandia.gov:80
    - git clone git@cee-gitlab.sandia.gov:8921-VAWT-TOOLS/OpenFASTWrappers.jl.git
    - git clone git@cee-gitlab.sandia.gov:8921-VAWT-TOOLS/VAWTAero.jl.git
    - git clone git@cee-gitlab.sandia.gov:8921-VAWT-TOOLS/GyricFEA.jl.git
    - git clone git@cee-gitlab.sandia.gov:8921-VAWT-TOOLS/ModelGen.jl.git
    - git clone git@cee-gitlab.sandia.gov:8921-VAWT-TOOLS/PreComp.jl.git
  script:
    # Let's run the tests. Substitute `coverage = false` below, if you do not
    # want coverage results.
    - julia -e 'using Pkg; Pkg.add(PackageSpec(url="https://github.com/byuflowlab/Composites.jl.git")); Pkg.add(PackageSpec(url="./OpenFASTWrappers.jl")); Pkg.add(PackageSpec(url="./PreComp.jl")); Pkg.add(PackageSpec(url="./VAWTAero.jl")); Pkg.add(PackageSpec(url="./GyricFEA.jl")); Pkg.add(PackageSpec(url="./ModelGen.jl")); Pkg.add(PackageSpec(url=pwd())); Pkg.build("OWENS"); Pkg.test("OWENS";coverage=true)'
    # Comment out below if you do not want coverage results.
    - julia -e 'using Pkg; Pkg.add("Coverage");
      import OWENS; cd(joinpath(dirname(pathof(OWENS)), ".."));
      using Coverage; cl, tl = get_summary(process_folder());
      println("", cl/tl*100," covered")'
  coverage: '/\d+\.\d+ covered/'

# Name a test and select an appropriate image.
# images comes from Docker hub
# test:1.0:
#   image: julia:1.0
#   <<: *test_definition

# test:1.4:
#   image: julia:1.4
#   <<: *test_definition

test:latest:
  image: julia:latest
  <<: *test_definition

# Maybe you would like to test your package against the development branch:
# test:1.1-dev (not sure there is such an image in docker, so not tested yet):
#  image: julia:v1.1-dev
#  # ... allowing for failures, since we are testing against the development
#  # branch:
#  allow_failure: true
#  <<: *test_definition

# REMARK: Do not forget to enable the coverage feature for your project, if you
# are using code coverage reporting above. This can be done by
#
# - Navigating to the `CI/CD Pipelines` settings of your project,
# - Copying and pasting the default `Simplecov` regex example provided, i.e.,
#   `\(\d+.\d+\%\) covered` in the `test coverage parsing` textfield.

# Example documentation deployment
# pages:
#   image: julia:0.7
#   stage: deploy
#   script:
#     - apt-get update -qq && apt-get install -y git # needed by Documenter
#     - julia -e "using Pkg; Pkg.clone(pwd()); Pkg.build("OWENS");" # rebuild Julia (can be put somewhere else I"m sure
#     - julia -e "using Pkg; import OWENS; Pkg.add("Documenter")" # install Documenter
#     - julia --color=yes docs/make.jl # make documentation
#     - mv docs/build public # move to the directory picked up by Gitlab pages
#   artifacts:
#     paths:
#       - public
#   only:
#   - master


# WARNING: This template is using the `julia` images from [Docker
# Hub][3]. One can use custom Julia images and/or the official ones found
# in the same place. However, care must be taken to correctly locate the binary
# file (`/opt/julia/bin/julia` above), which is usually given on the image's
# description page.
#
# [3]: https://hub.docker.com/_/julia/
